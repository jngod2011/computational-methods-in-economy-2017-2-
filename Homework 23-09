%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%Lista 3
%%%%%%%%%%%%%%%%%%

%Questão 1
%letra a
%rearranjando a equação como
%x=(x^2-1)^(1/3)
%da alguns valores iniciais
x=zeros(10,1);
%encontra o resultado
for i=1:10
    %coloca os valores iniciais
    erro=1;
    %define o i-ésimo chute inicial
    x(i)=randi([-100;100]);
    %enquanto eu estiver errando mais que 10^-3
    while abs(erro)>10^-3
        %executa o método da secante
        phi=(x(i)^2-1)^(1/3);
        erro=x(i)-phi;
        x(i)=phi;
    end
    %guarda o resultado
    x(i)=phi;
end
%printa o resultado
x
%teste o resultado  utilizando a funcao vpasolve
syms x
vpasolve(x^3 - x^2 + 1 == 0, x)

%letra b
%rearranjando a equação como
%x=log2-logsen(x)
%cria o vetor pra guardar as raizes
x=zeros(10,1);
%condição inicial
erro=1;
%encontra o resultado para 10 resultados iniciais
for i=1:10
    %coloca as condiçõe iniciais em todos os loops
    erro=1;
    phi=0
    %cada x iniciariá com um valor aleatório diferentes de -100 a 100
    x(i)=randi([-1000,1000])
    %aplica o método da secante a todos os valores iniciais
    while abs(erro)>10^-9
        %a função foi definida como x=log(2)-log(sen(x))
        phi=log(2)-log(sin(x(i)));
        %define o erro como a diferença de x e da função calculada
        erro=x(i)-phi;
        %define o novo x como o resultado da função
        x(i)=phi;
    end
end
%teste o resultado
2*exp(-x)-sin(x)
%encontra o resultado utilizando a função vpasolve
syms x
vpasolve(2*exp(-x)-sin(x) == 0, x)

%%%%%Questão 2

%%Letra a
%cria umas variaveis auxiliares
funcao=0.1;
derivada=0.1;
%cria o local onde eu vou armazenar as raizes
raizes=zeros(10,1);
%vou encontrar 10 estimativas diferentes das raizes
for i=1:10;
    %partindo de das valores iniciais diferentes
    aprox=randi([-100 100],1);
    %enquanto a função for maior que 0
    while abs(funcao)>10^-6;
        %realiza o procedimento newton rapson
        funcao=((exp(aprox)+aprox)/4)-cos(aprox);
        derivada=(exp(aprox)+1)/4+sin(aprox);
        aprox=aprox-funcao/derivada;
    end
    %reseta o valor da função para um próximo loop
    funcao=1;
    %aloca a raiz encontrada em um vetor de raizes
    raizes(i)=aprox;
end
%printa o vetor de raizes
raizes
%usa a função syms pra verificar os resultados
syms x
vpasolve((exp(x)+x)/4-cos(x) == 0,x, [0; 3])

%%Letra b
%cria umas variaveis auxiliares
funcao=0.1;
derivada=0.1;
%cria o local onde eu vou armazenar as raizes
raizes=zeros(10,1);
%vou encontrar 10 estimativas diferentes das raizes
for i=1:10;
    %partindo de das valoers iniciais diferentes
    aprox=randi([-100 100],1);
    %enquanto a função for maior que 0
    while funcao>10^-6;
        %realiza o procedimento newton rapson
        funcao=aprox*log(aprox)-0.8;
        derivada=log(aprox)+1;
        aprox=aprox-funcao/derivada;
    end
    %reseta o valor da função para um próximo loop
    funcao=1;
    %aloca a raiz encontrada em um vetor de raizes
    raizes(i)=aprox;
end
%print o veto de raizes
raizes
%usa a função syms pra verificar os resultados
syms x
vpasolve(x*log(x)-0.8 == 0, x)

%%%%Questão 5
%%Letra a
%cria umas variaveis auxiliares
funcao=0.1;
derivada=0.1;
%cria o local onde eu vou armazenar as raizes
raizes=zeros(10,1);
%vou encontrar 10 estimativas diferentes das raizes
for i=1:10;
    %partindo de das valoers iniciais diferentes
    aprox=randi([-100 100],1);
    %enquanto a função for maior que 0
    while funcao>10^-6;
        %realiza o procedimento newton rapson
        funcao=aprox^5-aprox-1;
        derivada=5*(aprox^4)-1;
        aprox=aprox-funcao/derivada;
    end
    %reseta o valor da função para um próximo loop
    funcao=1;
    %aloca a raiz encontrada em um vetor de raizes
    raizes(i)=aprox;
end
%print o veto de raizes
raizes
%usa a função syms pra verificar os resultados
syms x
vpasolve(x^5-x-1 == 0, x)

%%Letra b
%cria umas variaveis auxiliares
funcao=0.1;
derivada=0.1;
%cria o local onde eu vou armazenar as raizes
raizes=zeros(10,1);
%vou encontrar 10 estimativas diferentes das raizes
for i=1:10;
    %partindo de das valoers iniciais diferentes
    aprox=randi([-100 100],1);
    %enquanto a função for maior que 0
    while funcao>10^-6;
        %realiza o procedimento newton rapson
        funcao=aprox^10-0.5*aprox^7+32*aprox^3-5*aprox^2-102
        derivada=10*aprox^9-3.5*aprox^6+93*aprox^2-10*aprox-102;
        aprox=aprox-funcao/derivada;
    end
    %reseta o valor da função para um próximo loop
    funcao=1;
    %aloca a raiz encontrada em um vetor de raizes
    raizes(i)=aprox;
end
%print o veto de raizes
raizes
%usa a função syms pra verificar os resultados
syms x
vpasolve(x^10-0.5*x^7+32*x^3-5*x^2-102 == 0, x)

%% Letra c

%%Letra b
%cria umas variaveis auxiliares
funcao=0.1;
derivada=0.1;
%cria o local onde eu vou armazenar as raizes
raizes=zeros(10,1);
%vou encontrar 10 estimativas diferentes das raizes
for i=1:10;
    %partindo de das valoers iniciais diferentes
    aprox= rand*2-1;
    %enquanto a função for maior que 0
    while funcao>10^-10;
        %realiza o procedimento newton rapson
        funcao=aprox^7+aprox^5-2*aprox^2-aprox+1;
        derivada=7*aprox^6+5*aprox^4-4*aprox-1;
        aprox=aprox-funcao/derivada;
    end
    %reseta o valor da função para um próximo loop
    funcao=1;
    %aloca a raiz encontrada em um vetor de raizes
    raizes(i)=aprox;
end
%print o vetor de raizes
raizes
%usa a função vpasolve pra verificar os resultados
syms x
vpasolve(x^7+x^5-2*x^2-x+1 == 0, x)

%Questão 3
%letra A
%afirma quantos chutes iniciais eu vou dar
tentativas=10;
%cria um vetor onde eu vou alocar as solucoes
solucoes=zeros(10,1);
%cria o algoritmo de busca das soluções
for i=1:tentativas
    %pra cada loop reseta as condições iniciais do algoritmo
    xanterior=randi([-100,100]);
    xatual=xanterior-1;
    erro=1;
    %aplica o método da secante
    while abs(erro)>10^-10
        funcao_def=log(xanterior)+(xanterior+1)^3; 
        funcao_atual=log(xatual)+(xatual+1)^3;
        temp=xatual;
        xatual=(xanterior*funcao_atual-xatual*funcao_def)/(funcao_atual-funcao_def);
        xanterior=temp;
        erro=xatual-xanterior;
    end
    solucoes(i)=xatual;
end
solucoes
%testa pra ver se faz sentido
log(solucoes)+(solucoes+1).^3
%usa a função vpasolve pra verificar os resultados
syms x
vpasolve(log(x)+(x+1)^3 == 0, x)

%letra B
%afirma quantos chutes iniciais eu vou dar
tentativas=10;
%cria um vetor onde eu vou alocar as solucoes
solucoes=zeros(10,1);
%cria o algoritmo de busca das soluções
for i=1:tentativas
    %pra cada loop reseta as condições iniciais do algoritmo
    xanterior=randi([-100,100]);
    xatual=xanterior-1;
    erro=1;
    %aplica o método da secante
    while abs(erro)~=0
        funcao_def=xanterior^2-cos(xanterior); 
        funcao_atual=xatual^2-cos(xatual);
        temp=xatual;
        xatual=(xanterior*funcao_atual-xatual*funcao_def)/(funcao_atual-funcao_def);
        xanterior=temp;
        erro=xatual-xanterior;
    end
    solucoes(i)=xatual;
end
solucoes
%testa pra ver se faz sentido
solucoes.^2-cos(solucoes)
%usa a função vpasolve pra verificar os resultados
syms x
vpasolve(x^2-cos(x) == 0, x)

%Questão 4
%letra A
%da uma olhada no gráfico da função
fplot(@(x) log(x)+sqrt(x),[-5 5])
%usa a função vpa solve
syms z
vpasolve(log(z)+sqrt(z) == 0, z)

%letra B
%da uma olhada no gráfico da função
fplot(@(x) x.^2+x.*exp(x)-cos(x),[-5 5]) 
%usa a função vpa solve
syms z
vpasolve(z^2+z*exp(z)-cos(z) == 0, z)

%Questão 5
%letra A
%define o numero de tentativas
N=10;
for i=1:N
    %coloca as condições iniciais
    x0= randi([-50 50],1,1);
    j=0;
    x(1,1)=x0;
    ERRO=11;
    %aplica o metodo newton-raphson
    while(ERRO>0.000001 && j~=1000)
        f=x0^5-x0-1;
        Df=5*x0^4-1;
        diff=double(f/Df);
        j=j+1;
        %aloca cada resultado da conta num vetor pra depois poder analisar
        %a trajetória
        x(j,1+(i-1)*1)=x0;
        x1=x0-diff;
        ERRO=abs(x1-x0);
        x0=x1;
    end
    j=1;
    xR(1,i)=x0;
end
xR
plot(x)
%encontra os resultados pela funcao vpasolve
syms x
vpasolve(x^5-x-1 == 0, x)



% letra B
%define o numero de tentativas
N=10;
for i=1:N
    %define as condições iniciais
    x0= randi([-50 50],1,1);
    %dessa vez guardaremos todas as iterações para depois verificar a
    %trajetoria
    j=0;
    %o primeiro valor sera o aleatório gerado acima
    x(1,1)=x0;
    %set o erro inicial em 1
    ERRO=1;
    %realiza o loop até convergir ou em 100 iterações
    while(ERRO>0.000001 && j~=1000)
        %encontra o valor da funcao e da derivada
        f=x0^10-0.5*x0^7+32*x0^3-5*x0^2-102;
        Df=10*x0^9-3.5*x0^6+96*x0^2-10*x0;
        diff=double(f/Df);
        %aloca o novo valor calculado no vetor que está guardando a
        %trajetoria
        j=j+1;
        x(j,1+(i-1)*1)=x0;
        %encontra o novo x
        x1=x0-diff;
        %acha o erro nessa iteracao
        ERRO=abs(x1-x0);
        x0=x1;
    end
    %seta o j pro próximo loop
    j=1;
    %cria um vetor que vai guardar apenas as soluções finais chamdo xR
    xR(1,i)=x0;
end
%da uma olhada em xR
xR
%da uma olhada na trajetória de convergencia
plot(x)
%verifica quais as raizes que o matlab calcularia
syms x
vpasolve(x^10-0.5*x^7+32*x^3-5*x^2-102 == 0, x)

% letra C
%define o numero de tentativas
N=10;
for i=1:N
    %define as condições iniciais
    x0= randi([-50 50],1,1);
    %dessa vez guardaremos todas as iterações para depois verificar a
    %trajetoria
    j=0;
    %o primeiro valor sera o aleatório gerado acima
    x(1,1)=x0;
    %set o erro inicial em 1
    ERRO=1;
    %realiza o loop até convergir ou em 100 iterações
    while(ERRO>0.000001 && j~=1000)
        %encontra o valor da funcao e da derivada
        f=x0^7+x0^5-2*x0^2-x0+1;
        Df=7*x0^6+5*x0^4-4*x0-1;
        diff=double(f/Df);
        %aloca o novo valor calculado no vetor que está guardando a
        %trajetoria
        j=j+1;
        x(j,1+(i-1)*1)=x0;
        %encontra o novo x
        x1=x0-diff;
        %acha o erro nessa iteracao
        ERRO=abs(x1-x0);
        x0=x1;
    end
    %seta o j pro próximo loop
    j=1;
    %cria um vetor que vai guardar apenas as soluções finais chamdo xR
    xR(1,i)=x0;
end
%da uma olhada em xR
xR
%da uma olhada na trajetória de convergencia
plot(x)
%verifica quais as raizes que o matlab calcularia
syms x
vpasolve(x^7+x^5-2*x^2-x+1 == 0, x)

%Questão 6
syms x
%letra a
vpasolve(x^4-x-5 == 0, x)
%letra b
vpasolve(x^4-2*x^3-4*x^2+4*x+4 == 0, x)
%letra c
vpasolve(x^4+7.64*x^3+23.604*x^2+38.910*x+38.149 == 0, x)

%Questão 7
%define os valores iniciais
%escolhe os chutes iniciais iguais a um
x=ones(3,1);
%cria uma variavel que vai dizer se convergiu
convergiu=3;
%inicia o contador da coluna de c
i=1
%aplicar o metodo newton raphson
while convergiu~=0
    %calcula a função
    funcao=[-3*x(1,i)^4+16*x(2,i)^3+5*x(3,i)^2-16; x(1,i)^3+x(2,i)^2+x(3,i)-3;x(1,i)^2-4*x(2,i)];
    %calcula o jacobiano
    jacobiano=[-12*x(1,i)^3 48*x(2,i)^2 10*x(3,i); 3*x(1,i)^2 2*x(2,i) 1; 2*x(1,i) -4 0];
    %calcula a próxima iteração
    x(1:3,i+1)=x(1:3,i)-jacobiano^-1*funcao;
    %verifica se convergiu
    convergiu=sum(abs(x(1:3,i+1)-x(1:3,i))>10^-6);
    %define o indice da próxima iteração
    i=i+1;
end
resultado=x(1:3,i)
%da uma olhada na convergência
plot(x')

%verifica como a solução pelo VPA solve
syms x1 x2 x3
S = vpasolve([-3*x1^4+16*x2^3+5*x3^2-16 ==0, x1^3+x2^2+x3-3 == 0, x1^2-4*x2==0], [x1, x2, x3]);
x1=double(S.x1);
x2=double(S.x2);
x3=double(S.x3);
