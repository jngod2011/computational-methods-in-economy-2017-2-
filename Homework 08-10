%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%ATIVIDADE 08-10-2017
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%% EXERCICIO 1

%Carrega os pontos
pontos=[-3 1; -2 2; 1 -1; 3 10];
tam_pol=4;
%Ponto a ser interpolado
interpolar=1.5;
%Montra a matriz de interpolação
x=[[1 1 1 1]' pontos(:,1) pontos(:,1).^2 pontos(:,1).^3];
polinomio=inv(x)*pontos(:,2);
%encontra a interpolação para o ponto desejado
resultado=0;
for i=1:tam_pol
    resultado=resultado+polinomio(i)*interpolar.^(i-1);
end


%%%%%%%%%%%% EXERCICIO 2
%Carrega os dados
%letra a
ano=1975:5:1990;
EMM=[72.8 74.2 75.2 76.4];
tam_pol=4;
%encontra o polinomio interpolador
x=[[1 1 1 1]' ano' ano'.^2 ano'.^3];
polinomio=inv(x)*EMM';


%letra b
%Interpola pra 1982
interpolar=1982;
resultado=0;
for i=1:tam_pol
    resultado=resultado+polinomio(i)*interpolar.^(i-1);
end
resultado
sprintf('A estimativa interpolada para 1995 é %0.5f',resultado)

%interpola pra 1985
interpolar=1995;
resultado=0;
for i=1:tam_pol
    resultado=resultado+polinomio(i)*interpolar.^(i-1);
end
resultado
sprintf('A estimativa interpolada para 1995 é %0.5f',resultado)

%encontra o polinomio interpolador

%Questão 3
x=0:0.00001:pi;
f=cos(x);
%a quarta derivada da função cosseno é
f4=cos(x);
%Encontra o valor adequado 
N=0;
erro=1
while erro>0.5*10^(-3)
    N=N+1;
    h=(pi-0)/N;
    %a quarta derivada da função cosseno é
    f4=cos(x);
    %O erro conforme pág 31 do pdf é
    erro=max(abs(f4))*h./384;
end
N;
sprintf('logo precisaremos de %0.0f pontos',N)


%Questão 4
%Define o intervalo


%Interpola pra um polinomio de segunda ordem
interpolar=pi/8;
pontos=[0 pi];
f=cos(pontos);
%Montra a matriz de interpolação
x=[ones(size(pontos))' pontos'];
polinomio=inv(x)*pontos(:,2);
%encontra a interpolação para o ponto desejado
tam_pol=2;
resultado=0;
for i=1:tam_pol
    resultado=resultado+polinomio(i)*interpolar.^(i-1);
end
sprintf('a estimativa interpolada é %0.0f',resultado)
sprintf('o erro absoluto é %0.0f',resultado-cos(interpolar))

%Interpola pra um polinomio de segunda ordem
interpolar=pi/8;
pontos=[0 pi/3 2*pi/3 pi];
f=cos(pontos);
%Montra a matriz de interpolação
x=[ones(size(pontos))' pontos' pontos'.^2 pontos'.^3];
polinomio=inv(x)*pontos(:,2);
%encontra a interpolação para o ponto desejado
tam_pol=4;
resultado=0;
for i=1:tam_pol
    resultado=resultado+polinomio(i)*interpolar.^(i-1);
end
sprintf('a estimativa interpolada é %0.0f',resultado)
sprintf('o erro absoluto é %0.0f',resultado-cos(interpolar))

%Questão 5
x=[-2 1; -1 0; 1 -3; 4 8]
%primeiro método por default o linear
v1=interp1(x(:,1)',x(:,2)',0)
%segundo método -next
v1=interp1(x(:,1)',x(:,2)',0,'next')
%tercerito método - spline
v1=interp1(x(:,1)',x(:,2)',0,'spline')
%quarto método - pchip
v1=interp1(x(:,1)',x(:,2)',0,'pchip')
%quinto método - previous
v1=interp1(x(:,1)',x(:,2)',0,'previous')

%Questão 6
%vamos montar varios polinomios interpoladores
ordem_polinomio=3:10;
interpolar=-pi/2:0.0001:pi/2;
tamanho=size(interpolar);
tamanho=tamanho(2);
trajetoria=zeros(7,tamanho);

for i=3:10
    a = -pi/2;
    b = pi/2;
    pontos = (b-a).*rand(i,1) + a;
    
    %pontos=linspace(-pi/2,pi/2,i);
    f=cos(pontos);
    %Montra a matriz de interpolação
    x=[ones(size(pontos))];

    for j=2:i;
        x=[x [pontos.^j]];
    end
    
    polinomio=inv(x)*f;
    %encontra a interpolação para o ponto desejado
    tam_pol=i;
    resultado=zeros(size(interpolar));
    for m=1:tam_pol
        trajetoria(i-2,:)=resultado+polinomio(i)*interpolar.^(i-1);
    end
end

plot(trajetoria')

%%%%%%%%5%%%%%%DEU RUIM
%Questao 7
%cria a base de dados
k=4;
x=pi/2;
for i=1:k
    x=[x i*pi/2];
end
%encontra a imagem da função
f=cos(x)+sin(x)*0.1
%define o espaço de interpolação
interpolar=x(1):0.001:x(5);

interpolacao_spline=spline(f,x);
v1=interp1(x,f,interpolar)


%Questão 9
%vamos plotar a função verdadeira
figure
f = @(x) 1/(1+x.^2)
fplot(f,[-5,5])
hold on
%Vamos plotar o polinomio

%define uma amostra de pontos linearmente espacados
x = -5:1:5; 
v = 1./(1+x.^2);
%monta uma série que sera interpolada
xq = -5:0.01:5;
%interpola a serie
vq1 = interp1(x,v,xq);
%plota os pontos em azul e a interpolação em vermelho
plot(x,v,'o',xq,vq1,':.');
xlim([-5 5]);


%interpola tipo spline
vq2 = interp1(x,v,xq,'spline');
%adiciona no gráfico
plot(xq,vq2,':.');
%adiciona a verdadeira funcao

%Bota um titulo
title('Interpolações')


%Questão 12
%cria os pontos de x e y
pointx=-1:2/20:1;
pointy=sin(2*pi*pointx);
%cria o espaço a ser interpolado
x= linspace(-1,1);
%interpola ve quanto pontos eu tenho
n=size(pointx,2);
%cria aquele primeiro vetor de constantes
L=ones(n,size(x,2));
%interpola por lagrange
for i=1:n
   for j=1:n
      if (i~=j)
         L(i,:)=L(i,:).*(x-pointx(j))/(pointx(i)-pointx(j));
      end
   end

   y=0;
   for i=1:n
      y=y+pointy(i)*L(i,:);
    end
end
%define defaults pro grid
set(gca,'xtick',[-1:1])
set(gca,'ytick',linspace(-1,1))
%plot a interpolação
plot(pointx,pointy,'o',x,y,':.')
hold on
%monta o polinomio de hermite
herm=pchip(pointx,pointy,x)
plot(x,herm)
hold on
%monta o spline cubico
spl=spline(pointx,pointy,x)
plot(x,spl)
%plota a verdadeira funcao
f = @(x) sin(2*pi*x)
fplot(f,[-1,1])


%faz tudo de novo mas agora com dados perturbados
i=1:21
pointy=sin(2.*pi.*pointx)+(-1).^(i+1)*(10.^-4)

%faz as conta tudo denovo
%cria o espaço a ser interpolado
x= linspace(-1,1);
%interpola ve quanto pontos eu tenho
n=size(pointx,2);
%cria aquele primeiro vetor de constantes
L=ones(n,size(x,2));
%interpola por lagrange
for i=1:n
   for j=1:n
      if (i~=j)
         L(i,:)=L(i,:).*(x-pointx(j))/(pointx(i)-pointx(j));
      end
   end

   y=0;
   for i=1:n
      y=y+pointy(i)*L(i,:);
    end
end
%define defaults pro grid
set(gca,'xtick',[-1:1])
set(gca,'ytick',linspace(-1,1))
%plot a interpolação
plot(pointx,pointy,'o',x,y,':.')
hold on
%monta o polinomio de hermite
herm=pchip(pointx,pointy,x)
plot(x,herm)
hold on
%monta o spline cubico
spl=spline(pointx,pointy,x)
plot(x,spl)
%plota a verdadeira funcao
f = @(x) sin(2*pi*x)
fplot(f,[-1,1])


%Questão 13
teste=1:8
tensao=[0 0.06 0.14 0.25 0.31 0.47 0.60 0.70]
deformacao=[0 0.08 0.14 0.2 0.23 0.25 0.28 0.29]

%cria o espaço a ser interpolado
x= linspace(0,1);
%ve quanto pontos eu tenho
n=size(tensao,2);
%cria aquele primeiro vetor de constantes
L=ones(n,size(x,2));
%interpola por lagrange
for i=1:n
   for j=1:n
      if (i~=j)
         L(i,:)=L(i,:).*(x-tensao(j))/(tensao(i)-tensao(j));
      end
   end

   y=0;
   for i=1:n
      y=y+deformacao(i)*L(i,:);
    end
end
%define defaults pro grid
set(gca,'xtick',[0:1])
set(gca,'ytick',linspace(0,1))
%plot a interpolação
plot(tensao,deformacao,'o',x,y,':.')
hold on
%monta o polinomio de hermite
herm=pchip(tensao,deformacao,x)
plot(x,herm)
hold on
%monta o spline cubico
spl=spline(tensao,deformacao,x)
plot(x,spl)

clear 
clc
%calcula a interpolacao pra 0.9
x=0.9
n=size(tensao,2);
L=ones(n,size(x,2));
for i=1:n
   for j=1:n
      if (i~=j)
         L(i,:)=L(i,:).*(x-tensao(j))/(tensao(i)-tensao(j));
      end
   end

   y=0;
   for i=1:n
      y=y+deformacao(i)*L(i,:);
    end
end
%printa o resultado polinomio interpolador
y
%printa a interpolacao de herm
herm_09=pchip(tensao,deformacao,x)
herm_09
%interpolacao spline
spl=spline(tensao,deformacao,x)
